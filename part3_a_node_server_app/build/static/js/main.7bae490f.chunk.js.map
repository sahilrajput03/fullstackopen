{"version":3,"sources":["services/notes.js","components/Note.js","App.js","index.js"],"names":["nonExisting","id","content","date","important","axios","get","then","response","data","concat","newObject","post","put","Note","note","toggleImportance","label","className","onClick","Footer","align","style","color","fontStyle","fontSize","Notification","message","App","props","useState","newNote","setNewNote","notes","setNotes","showAll","setShowAll","errorMessage","setErrorMessage","useEffect","noteService","console","log","notesToShow","filter","toggleImportanceof","find","n","changedNote","map","catch","error","setTimeout","onSubmit","event","preventDefault","noteObject","Date","toISOString","Math","random","length","value","onChange","target","placeholder","type","key","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.7bae490f.chunk.js","sourcesContent":["import axios from 'axios'\r\n// const baseurl = 'http://192.168.43.29:3001/notes'\r\n// const baseurl = 'http://localhost:3001/notes'\r\n// const baseurl = 'http://damp-atoll-37310.herokuapp.com/notes'\r\nconst baseurl = '/notes'\r\n\r\nconst getAll = () => {\r\n    const nonExisting = {\r\n        id: 10000,\r\n        content: 'HardCodedNote-Immutable',\r\n        date: '2019-05-30T17:30:31.098Z',\r\n        important: true,\r\n      }\r\n    return axios.get(baseurl).then(response => response.data.concat(nonExisting));\r\n}\r\n\r\nconst create = newObject => {\r\n    return axios.post(baseurl, newObject).then(response => response.data);\r\n}\r\n\r\nconst update = (id, newObject) => {\r\n    return axios.put(`${baseurl}/${id}`, newObject).then(response => response.data)\r\n}\r\n\r\nexport default {getAll,create,update}","import React from 'react'\r\nconst Note = ({ note, toggleImportance}) => {\r\n  const label = note.important?'make not important':'make important'\r\n    return (\r\n      <li className='note'>\r\n        {note.content}\r\n        <button className='buttonCustom floatRight' onClick={toggleImportance}>{label}</button>\r\n      </li>\r\n    )\r\n  }\r\n  export default Note","// import React, { useState } from 'react'\r\nimport noteService from './services/notes'\r\nimport React, { useState, useEffect } from 'react'\r\nimport Note from './components/Note'\r\nimport './index.css'\r\n\r\n\r\n\r\nconst Footer = () => {\r\n    const footerStyle = {\r\n        color: 'green',\r\n        fontStyle: 'italic',\r\n        fontSize: 16\r\n        // align: 'center'\r\n    }\r\n\r\n    return (\r\n        <div align=\"center\" style={footerStyle}>\r\n            <br />\r\n            <em>Note app, Department of Computer Science, University of Helsinki 2019</em>\r\n        </div>\r\n    )\r\n}\r\n\r\n\r\nconst Notification = ({ message }) => {\r\n    if (message === null) {\r\n        return null\r\n    }\r\n\r\n    return (\r\n        <div className=\"error\">\r\n            {message}\r\n        </div>\r\n    )\r\n}\r\n\r\n\r\nconst App = (props) => {\r\n    // const [notes, setNotes] = useState(props.dnotes)\r\n    const [newNote, setNewNote] = useState('')\r\n    const [notes, setNotes] = useState([])\r\n    const [showAll, setShowAll] = useState(true)\r\n    const [errorMessage, setErrorMessage] = useState(null)\r\n\r\n    // useEffect code below\r\n    const hook = () => {\r\n        // console.log('effect is asynchronous, I got late fetching notes from the server')\r\n        noteService\r\n            .getAll()\r\n            .then(response => {\r\n                console.log(response);\r\n                // console.log('promimse fulfilled');\r\n                setNotes(response)\r\n            })\r\n    }\r\n    useEffect(hook, [])\r\n\r\n    // functional code below\r\n\r\n    const notesToShow = showAll\r\n        ? notes\r\n        : notes.filter(note => note.important === true)\r\n\r\n    const toggleImportanceof = (id) => {\r\n        console.log(`Importance of ${id} needs to be changed as you clicked the button.`);\r\n        // const url = `http://localhost:3001/notes/${id}`\r\n        const note = notes.find(n => n.id === id)\r\n        const changedNote = { ...note, important: !note.important }\r\n        // axios.put(url,changedNote).then(response=>{\r\n        noteService\r\n            .update(id, changedNote)\r\n            .then(response => {\r\n                setNotes(notes.map(note => note.id !== id ? note : response))\r\n            })\r\n            .catch(error => {\r\n                console.log(\"catch-error-body-inside\")\r\n                // alert(`the note \"${note.content}\" was already deleted from server`)\r\n                setErrorMessage(`Note \"${note.content}\" was already deleted from server`)\r\n                setTimeout(() => {setErrorMessage(null)}, 5000)\r\n\r\n                setNotes(notes.filter(n => n.id !== id))\r\n            })\r\n        console.log(changedNote.important);\r\n    }\r\n\r\n    // const rows = () => notes.map((note) =>\r\n    const rows = () => notesToShow.map((note) =>\r\n        <Note\r\n            key={note.id}\r\n            note={note}\r\n            toggleImportance={() => (toggleImportanceof(note.id))}\r\n        />\r\n    )\r\n\r\n    const addNote = (event) => {\r\n        event.preventDefault()\r\n        const noteObject = {\r\n            content: newNote,\r\n            date: new Date().toISOString(),\r\n            important: Math.random() > 0.5,\r\n            id: notes.length + 1 // id's are generated automatically.\r\n        }\r\n\r\n        // axios.post('http://localhost:3001/notes', noteObject)\r\n        noteService.create(noteObject)\r\n            .then(response => {\r\n                console.log(response)\r\n                setNotes(notes.concat(response))\r\n                setNewNote('')\r\n            })\r\n    }\r\n\r\n    const handleNoteChange = (event) => {\r\n        setNewNote(event.target.value)\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <h1 align=\"center\">Notes</h1>\r\n\r\n            <Notification message={errorMessage} />\r\n\r\n            <div>\r\n                <button className='buttonCustom floatLeft' onClick={() => setShowAll(!showAll)}>\r\n                    Show {showAll ?  'important' : 'all'}\r\n                </button>\r\n            </div>\r\n            <br></br><p></p>\r\n            <div align=\"center\">\r\n                <form onSubmit={addNote}>\r\n                    <input\r\n                        className='inputField'\r\n                        value={newNote}\r\n                        onChange={handleNoteChange}\r\n                        placeholder=\"Type your note here..\"\r\n                    />\r\n                    <button className='buttonCustom' type=\"submit\">save</button>\r\n                </form>\r\n            </div>\r\n            <br></br>\r\n            <ul>\r\n                {rows()}\r\n            </ul>\r\n\r\n            <Footer />\r\n        </div>\r\n    )\r\n}\r\nexport default App","import React from 'react'\r\nimport ReactDOM from 'react-dom'\r\nimport App from './App'\r\n\r\n// const fnotes = [\r\n//     {\r\n//         id: 1,\r\n//         content: 'HTML is easy',\r\n//         date: '2019-05-30T17:30:31.098Z',\r\n//         important: true\r\n//     },\r\n//     {\r\n//         id: 2,\r\n//         content: 'Browser can execute only Javascript',\r\n//         date: '2019-05-30T18:39:34.091Z',\r\n//         important: false\r\n//     },\r\n//     {\r\n//         id: 3,\r\n//         content: 'GET and POST are the most important methods of HTTP protocol',\r\n//         date: '2019-05-30T19:20:14.298Z',\r\n//         important: true\r\n//     }\r\n// ]\r\n\r\n\r\nReactDOM.render(\r\n    <App />,\r\n    document.getElementById('root')\r\n)\r\n\r\n    // EARLIER TRAILS - <App dnotes={fnotes} />,\r\n"],"sourceRoot":""}